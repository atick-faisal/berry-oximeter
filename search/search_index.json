{"config":{"lang":["en"],"separator":"[\\s\\-]+","pipeline":["stopWordFilter"]},"docs":[{"location":"","title":"Berry Oximeter \ud83e\udec0","text":"<p>A simple Python library for real-time data collection from BerryMed pulse oximeters via Bluetooth LE. Get heart rate, SpO2, and perfusion index readings with just a few lines of code!</p> <p>Warning</p> <p>This library is for educational and research purposes only. It is not intended for medical diagnosis</p> <p>or treatment. Always consult with a qualified healthcare provider for medical advice.</p>"},{"location":"#features","title":"Features \u2728","text":"<ul> <li>\ud83d\udd0c Auto-discovery - Automatically finds and connects to your BerryMed device</li> <li>\ud83d\udcca Real-time streaming - Get live readings with customizable callbacks</li> <li>\ud83d\udcc8 Data collection - Collect readings over time for analysis</li> <li>\ud83d\udcbe CSV logging - Built-in data logging to CSV files</li> <li>\ud83c\udfaf Signal filtering - Filter readings by signal quality</li> <li>\ud83d\udc0d Pythonic API - Simple, intuitive interface</li> <li>\ud83e\uddea Type hints - Full type hint support for better IDE experience</li> </ul>"},{"location":"#installation","title":"Installation \ud83d\udce6","text":"<p>Install via pip:</p> <pre><code>pip install berry-oximeter\n</code></pre> <p>Or using uv:</p> <pre><code>uv add berry-oximeter\n</code></pre>"},{"location":"#quick-start","title":"Quick Start \ud83d\ude80","text":""},{"location":"#basic-usage","title":"Basic Usage","text":"<pre><code>from berry_oximeter import BerryOximeter\n\n# Create instance and connect\noximeter = BerryOximeter()\noximeter.connect()\n\n# Enable console output\noximeter.log_to_console(True)\n\n# Let it run for 30 seconds\nimport time\n\ntime.sleep(30)\n\n# Disconnect\noximeter.disconnect()\n</code></pre>"},{"location":"#callback-based-streaming","title":"Callback-based Streaming","text":"<pre><code>def handle_reading(reading):\n    if reading.is_valid:\n        print(f\"\u2665 SpO2: {reading.spo2}%, Pulse: {reading.pulse_rate} BPM\")\n    else:\n        print(f\"Status: {reading.status}\")\n\n\noximeter = BerryOximeter()\noximeter.connect()\noximeter.start_streaming(handle_reading)\n\n# Stream for 60 seconds\ntime.sleep(60)\n\noximeter.stop_streaming()\noximeter.disconnect()\n</code></pre>"},{"location":"#data-collection-analysis","title":"Data Collection &amp; Analysis","text":"<pre><code># Collect 60 seconds of data\noximeter = BerryOximeter()\noximeter.connect()\n\nreadings = oximeter.get_readings(duration_seconds=60)\n\n# Analyze the data\nvalid_readings = [r for r in readings if r.is_valid]\navg_spo2 = sum(r.spo2 for r in valid_readings) / len(valid_readings)\navg_pulse = sum(r.pulse_rate for r in valid_readings) / len(valid_readings)\n\nprint(f\"Average SpO2: {avg_spo2:.1f}%\")\nprint(f\"Average Pulse: {avg_pulse:.1f} BPM\")\n\noximeter.disconnect()\n</code></pre>"},{"location":"#csv-logging","title":"CSV Logging","text":"<pre><code>oximeter = BerryOximeter()\noximeter.connect()\n\n# Start logging (auto-generates filename with timestamp)\nfilename = oximeter.start_logging()\nprint(f\"Logging to: {filename}\")\n\n# Or specify your own filename\n# oximeter.start_logging(\"patient_123.csv\")\n\n# Collect data\noximeter.log_to_console(True)\ntime.sleep(300)  # 5 minutes\n\n# Stop logging\noximeter.stop_logging()\noximeter.disconnect()\n</code></pre>"},{"location":"#context-manager-auto-cleanup","title":"Context Manager (Auto-cleanup)","text":"<pre><code>with BerryOximeter() as oximeter:\n    oximeter.connect()\n    oximeter.log_to_console(True)\n    time.sleep(30)\n    # Automatically disconnects when done\n</code></pre>"},{"location":"#api-reference","title":"API Reference \ud83d\udcda","text":""},{"location":"#berryoximeter-class","title":"BerryOximeter Class","text":"<p>The main interface for interacting with the pulse oximeter.</p>"},{"location":"#connection-methods","title":"Connection Methods","text":"<ul> <li><code>connect(device_address=None, timeout=10.0)</code> - Connect to device</li> <li><code>disconnect()</code> - Disconnect from device</li> <li><code>is_connected</code> - Property to check connection status</li> </ul>"},{"location":"#data-access-methods","title":"Data Access Methods","text":"<ul> <li><code>start_streaming(callback)</code> - Start streaming with callback function</li> <li><code>stop_streaming()</code> - Stop streaming</li> <li><code>get_reading(timeout=5.0)</code> - Get a single reading</li> <li><code>get_readings(duration_seconds)</code> - Collect readings for specified duration</li> </ul>"},{"location":"#logging-methods","title":"Logging Methods","text":"<ul> <li><code>start_logging(filename=None)</code> - Start CSV logging</li> <li><code>stop_logging()</code> - Stop logging and return filename</li> <li><code>log_to_console(enabled=True)</code> - Enable/disable console output</li> </ul>"},{"location":"#configuration","title":"Configuration","text":"<ul> <li><code>set_filter(min_signal_strength=None)</code> - Filter by signal quality (0-8)</li> </ul>"},{"location":"#oximeterreading-object","title":"OximeterReading Object","text":"<p>Each reading contains:</p> <ul> <li><code>timestamp</code> - When the reading was taken</li> <li><code>spo2</code> - Oxygen saturation (%) or None</li> <li><code>pulse_rate</code> - Heart rate (BPM) or None</li> <li><code>pleth</code> - Plethysmograph value or None</li> <li><code>signal_strength</code> - Signal quality (0-8)</li> <li><code>is_valid</code> - True if SpO2 and pulse are valid</li> <li><code>status</code> - Human-readable status (\"reading\", \"no_finger\", \"searching\", etc.)</li> </ul>"},{"location":"#exceptions","title":"Exceptions","text":"<ul> <li><code>DeviceNotFoundError</code> - No BerryMed device found</li> <li><code>ConnectionError</code> - Failed to connect to device</li> <li><code>NoDataError</code> - No data received within timeout</li> </ul>"},{"location":"#advanced-usage","title":"Advanced Usage \ud83d\udd27","text":""},{"location":"#filtering-low-quality-signals","title":"Filtering Low-Quality Signals","text":"<pre><code># Only accept readings with signal strength &gt;= 5\noximeter.set_filter(min_signal_strength=5)\n\n\ndef quality_callback(reading):\n    print(f\"High quality: SpO2 {reading.spo2}%, Signal: {reading.signal_strength}/8\")\n\n\noximeter.start_streaming(quality_callback)\n</code></pre>"},{"location":"#custom-logging","title":"Custom Logging","text":"<pre><code>import csv\n\n\ndef custom_logger(reading):\n    if reading.is_valid:\n        with open('custom_log.csv', 'a', newline='') as f:\n            writer = csv.writer(f)\n            writer.writerow([\n                reading.timestamp,\n                reading.spo2,\n                reading.pulse_rate,\n                reading.pleth,\n                reading.signal_strength\n            ])\n\n\noximeter.start_streaming(custom_logger)\n</code></pre>"},{"location":"#async-integration","title":"Async Integration","text":"<p>Since the library runs BLE operations in a separate thread, it works well with async code:</p> <pre><code>import asyncio\n\n\nasync def monitor_patient(patient_id, duration):\n    oximeter = BerryOximeter()\n    oximeter.connect()\n    oximeter.start_logging(f\"patient_{patient_id}.csv\")\n\n    await asyncio.sleep(duration)\n\n    oximeter.stop_logging()\n    oximeter.disconnect()\n\n\n# Run multiple monitors concurrently\nasync def main():\n    await asyncio.gather(\n        monitor_patient(\"001\", 300),\n        monitor_patient(\"002\", 300)\n    )\n</code></pre>"},{"location":"#troubleshooting","title":"Troubleshooting \ud83d\udd0d","text":""},{"location":"#device-not-found","title":"Device Not Found","text":"<ul> <li>Make sure your BerryMed oximeter is turned on</li> <li>Check that Bluetooth is enabled on your computer</li> <li>The device name should be \"BerryMed\" - if yours is different, you'll need to modify the code</li> <li>On Linux, you may need to run with <code>sudo</code> or add your user to the <code>bluetooth</code> group</li> </ul>"},{"location":"#connection-issues","title":"Connection Issues","text":"<ul> <li>Ensure the device isn't already connected to another application</li> <li>Try moving closer to the device</li> <li>Some devices may need to be in pairing mode</li> </ul>"},{"location":"#no-readings","title":"No Readings","text":"<ul> <li>Make sure your finger is properly inserted</li> <li>Keep your hand still - movement affects readings</li> <li>Warm up cold fingers first</li> <li>Check the signal strength indicator</li> </ul>"},{"location":"#supported-devices","title":"Supported Devices \ud83d\udcf1","text":"<p>This library is tested with:</p> <ul> <li>BerryMed BM1000C</li> <li>Other BerryMed pulse oximeters using   the BCI protocol</li> </ul> <p>The library should work with any Berry device that:</p> <ul> <li>Advertises as \"BerryMed\" over Bluetooth LE</li> <li>Uses the standard BCI protocol (5-byte packets)</li> </ul>"},{"location":"#contributing","title":"Contributing \ud83e\udd1d","text":"<p>Contributions are welcome! Please feel free to submit a Pull Request. For major changes, please open an issue first to discuss what you would like to change.</p> <ol> <li>Fork the repository</li> <li>Create your feature branch (<code>git checkout -b feature/AmazingFeature</code>)</li> <li>Commit your changes (<code>git commit -m 'Add some AmazingFeature'</code>)</li> <li>Push to the branch (<code>git push origin feature/AmazingFeature</code>)</li> <li>Open a Pull Request</li> </ol>"},{"location":"#acknowledgments","title":"Acknowledgments \ud83d\ude4f","text":"<ul> <li>Thanks to the Bleak project for the excellent BLE library</li> <li>Inspired by the need for simple, reliable pulse oximeter data collection in research settings</li> <li></li> </ul> <p>Qatar University Machine Learning Group <p></p>"}]}